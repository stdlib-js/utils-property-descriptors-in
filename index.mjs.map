{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getOwnPropertyDescriptors = require( '@stdlib/utils-property-descriptors' );\nvar getOwnPropertySymbols = require( '@stdlib/utils-property-symbols' );\nvar getPrototypeOf = require( '@stdlib/utils-get-prototype-of' );\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\n\n\n// MAIN //\n\n/**\n* Returns an object's own and inherited property descriptors.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.getOwnPropertyDescriptors()`, this function returns an empty object if provided `undefined` or `null`, rather than throwing an error.\n*\n* @param {*} value - input object\n* @returns {Object} own and inherited property descriptors\n*\n* @example\n* var obj = {\n*     'beep': 'boop',\n*     'foo': 3.14\n* };\n*\n* var desc = propertyDescriptorsIn( obj );\n* // returns { 'beep': {...}, 'foo': {...}, ... }\n*/\nfunction propertyDescriptorsIn( value ) {\n\tvar desc;\n\tvar keys;\n\tvar obj;\n\tvar tmp;\n\tvar i;\n\n\tif ( value === null || value === void 0 ) {\n\t\treturn {};\n\t}\n\t// Cast the value to an object:\n\tobj = Object( value );\n\n\t// Walk the prototype chain collecting all property descriptors...\n\tdesc = {};\n\tdo {\n\t\ttmp = getOwnPropertyDescriptors( obj );\n\t\tkeys = objectKeys( tmp );\n\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t// The first encountered property descriptor for a property name always takes precedence...\n\t\t\tif ( !hasOwnProp( desc, keys[ i ] ) ) {\n\t\t\t\t// The following is equivalent to `desc[ keys[i] ] = {...}`, but accounts for the possibility of a \"poisoned\" `Object` prototype (i.e., an `Object.prototype` having a property with a setter which throws).\n\t\t\t\tdefineProperty( desc, keys[ i ], {\n\t\t\t\t\t'configurable': true,\n\t\t\t\t\t'enumerable': true,\n\t\t\t\t\t'writable': true,\n\t\t\t\t\t'value': tmp[ keys[ i ] ]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tkeys = getOwnPropertySymbols( tmp );\n\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t// The first encountered property descriptor for a symbol property always takes precedence...\n\t\t\tif ( !hasOwnProp( desc, keys[ i ] ) ) {\n\t\t\t\t// The following is equivalent to `desc[ keys[i] ] = {...}`, but accounts for the possibility of a \"poisoned\" `Object` prototype (i.e., an `Object.prototype` having a property with a setter which throws).\n\t\t\t\tdefineProperty( desc, keys[ i ], {\n\t\t\t\t\t'configurable': true,\n\t\t\t\t\t'enumerable': true,\n\t\t\t\t\t'writable': true,\n\t\t\t\t\t'value': tmp[ keys[ i ] ]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tobj = getPrototypeOf( obj );\n\t} while ( obj );\n\n\treturn desc;\n}\n\n\n// EXPORTS //\n\nmodule.exports = propertyDescriptorsIn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an object's own and inherited property descriptors.\n*\n* @module @stdlib/utils-property-descriptors-in\n*\n* @example\n* var propertyDescriptorsIn = require( '@stdlib/utils-property-descriptors-in' );\n*\n* var desc = propertyDescriptorsIn({\n*   'foo': 'bar',\n*   'beep': 'boop'\n* });\n* // returns { 'foo': {...}, 'beep': {...}, ... }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["getOwnPropertyDescriptors","require$$0","getOwnPropertySymbols","require$$1","getPrototypeOf","require$$2","objectKeys","require$$3","defineProperty","require$$4","hasOwnProp","require$$5","lib","value","desc","keys","obj","tmp","i","Object","length","configurable","enumerable","writable"],"mappings":";;ohBAsBA,IAAIA,EAA4BC,EAC5BC,EAAwBC,EACxBC,EAAiBC,EACjBC,EAAaC,EACbC,EAAiBC,EACjBC,EAAaC,EA4EjB,IC7DAC,EDSA,SAAgCC,GAC/B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKL,MAAAA,EACJ,MAAO,GAGRG,EAAMG,OAAQN,GAGdC,EAAO,GACP,EAAG,CAGF,IAFAG,EAAMjB,EAA2BgB,GACjCD,EAAOT,EAAYW,GACbC,EAAI,EAAGA,EAAIH,EAAKK,OAAQF,IAEvBR,EAAYI,EAAMC,EAAMG,KAE7BV,EAAgBM,EAAMC,EAAMG,GAAK,CAChCG,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZV,MAASI,EAAKF,EAAMG,MAKvB,IADAH,EAAOb,EAAuBe,GACxBC,EAAI,EAAGA,EAAIH,EAAKK,OAAQF,IAEvBR,EAAYI,EAAMC,EAAMG,KAE7BV,EAAgBM,EAAMC,EAAMG,GAAK,CAChCG,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZV,MAASI,EAAKF,EAAMG,MAIvBF,EAAMZ,EAAgBY,SACbA,GAEV,OAAOF"}